//Пирамидальная сортировка на c++
#include <iostream>
#include <vector>
using namespace std;

void heapify(vector<int>& arr, int n, int i) {
    int largest = i; // Инициализируем наибольший элемент как корень
    int left = 2 * i + 1; // левый = 2*i + 1
    int right = 2 * i + 2; // правый = 2*i + 2
    
    // Проверяем существует ли левый дочерний элемент больший, чем корень
    if (left < n && arr[i] < arr[left]) {
        largest = left;
    }
    
    // Проверяем существует ли правый дочерний элемент больший, чем корень
    if (right < n && arr[largest] < arr[right]) {
        largest = right;
    }
    
    // Меняем корень, если нужно
    if (largest != i) {
        swap(arr[i], arr[largest]); // своп
        // Применяем heapify к корню
        heapify(arr, n, largest);
    }
}

void heapSort(vector<int>& arr) {
    int n = arr.size();
    
    // Построение max-heap.
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }
    
    // Один за другим извлекаем элементы
    for (int i = n - 1; i > 0; i--) {
        swap(arr[i], arr[0]); // меняем корень с последним элементом
        heapify(arr, i, 0);
    }
}

// Пример использования:
int main() {
    vector<int> arr = {12, 11, 13, 5, 6, 7};
    
    cout << "Исходный массив: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;
    
    heapSort(arr);
    
    cout << "Отсортированный массив: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;
    
    return 0;
}

//Пирамидальная сортировка на Java
public class HeapSort {

    public static void heapify(int[] arr, int n, int i) {
        int largest = i; // Инициализируем наибольший элемент как корень
        int left = 2 * i + 1; // левый = 2*i + 1
        int right = 2 * i + 2; // правый = 2*i + 2
        
        // Проверяем существует ли левый дочерний элемент больший, чем корень
        if (left < n && arr[i] < arr[left]) {
            largest = left;
        }
        
        // Проверяем существует ли правый дочерний элемент больший, чем корень
        if (right < n && arr[largest] < arr[right]) {
            largest = right;
        }
        
        // Меняем корень, если нужно
        if (largest != i) {
            int temp = arr[i];
            arr[i] = arr[largest];
            arr[largest] = temp; // своп
            // Применяем heapify к корню
            heapify(arr, n, largest);
        }
    }

    public static void heapSort(int[] arr) {
        int n = arr.length;
        
        // Построение max-heap.
        for (int i = n / 2 - 1; i >= 0; i--) {
            heapify(arr, n, i);
        }
        
        // Один за другим извлекаем элементы
        for (int i = n - 1; i > 0; i--) {
            int temp = arr[i];
            arr[i] = arr[0];
            arr[0] = temp; // меняем корень с последним элементом
            heapify(arr, i, 0);
        }
    }

    // Пример использования:
    public static void main(String[] args) {
        int[] arr = {12, 11, 13, 5, 6, 7};
        
        System.out.print("Исходный массив: ");
        for (int num : arr) {
            System.out.print(num + " ");
        }
        System.out.println();
        
        heapSort(arr);
        
        System.out.print("Отсортированный массив: ");
        for (int num : arr) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}
